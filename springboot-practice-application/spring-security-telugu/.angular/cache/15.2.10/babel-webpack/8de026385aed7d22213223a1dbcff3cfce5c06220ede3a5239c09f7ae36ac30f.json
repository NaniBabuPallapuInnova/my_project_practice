{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:9999/api';\n  }\n  getEmployeesList() {\n    return this.httpClient.get(this.baseUrl + \"/\" + 'employees').pipe(catchError(error => {\n      console.error('can not fetch employees list');\n      return throwError('Unable to fetch employees list : ', error);\n    }));\n  }\n  createEmployee(employee) {\n    return this.httpClient.post(this.baseUrl + '/save/employee', employee).pipe(catchError(error => {\n      console.log('failed to create an new employee', error);\n      return throwError('unable to create employee', error);\n    }));\n  }\n  updateEmployee(id, employee) {\n    return this.httpClient.put(this.baseUrl + `/update/employee/${id}`, employee);\n  }\n  getEmployeeById(id) {\n    return this.httpClient.get(this.baseUrl + `/get/employee/${id}`);\n  }\n  deleteEmployeeById(id) {}\n  static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAOzD,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;IAFtB,YAAO,GAAG,2BAA2B;EAI5C;EAEAC,gBAAgB;IACf,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAa,IAAI,CAACC,OAAO,GAAC,GAAG,GAAC,WAAW,CAAC,CAACC,IAAI,CACvER,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAC;MAC7C,OAAOR,UAAU,CAAC,mCAAmC,EAAEQ,KAAK,CAAC;IAC/D,CAAC,CAAC,CACH;EACF;EAIAE,cAAc,CAACC,QAAmB;IACjC,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAW,IAAI,CAACN,OAAO,GAAC,gBAAgB,EAAEK,QAAQ,CAAC,CAACJ,IAAI,CACjFR,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACI,GAAG,CAAC,kCAAkC,EAAEL,KAAK,CAAC;MACtD,OAAOR,UAAU,CAAC,2BAA2B,EAAEQ,KAAK,CAAC;IACvD,CAAC,CAAC,CACH;EACF;EAEAM,cAAc,CAACC,EAAW,EAAEJ,QAAmB;IAC9C,OAAO,IAAI,CAACR,UAAU,CAACa,GAAG,CAAW,IAAI,CAACV,OAAO,GAAC,oBAAoBS,EAAE,EAAE,EAAEJ,QAAQ,CAAC;EACtF;EAEAM,eAAe,CAACF,EAAW;IAC1B,OAAO,IAAI,CAACZ,UAAU,CAACE,GAAG,CAAW,IAAI,CAACC,OAAO,GAAC,iBAAiBS,EAAE,EAAE,CAAC;EACzE;EAEAG,kBAAkB,CAACH,EAAU,GAE7B;EAAC;qBAtCSd,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAkB,SAAflB,eAAe;IAAAmB,YAFd;EAAM","names":["catchError","throwError","EmployeeService","constructor","httpClient","getEmployeesList","get","baseUrl","pipe","error","console","createEmployee","employee","post","log","updateEmployee","id","put","getEmployeeById","deleteEmployeeById","factory","providedIn"],"sourceRoot":"","sources":["C:\\Personal Projects\\self_learning\\springboot-practice-application\\spring-security-telugu\\src\\main\\webapp\\app\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Employee } from '../interfaces/employee';\nimport { HttpClient} from '@angular/common/http'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  private baseUrl = 'http://localhost:9999/api';\n\n  constructor(private httpClient : HttpClient) {\n\n   }\n\n   getEmployeesList() : Observable<Employee[]>{\n    return this.httpClient.get<Employee[]>(this.baseUrl+\"/\"+'employees').pipe(\n      catchError(error => {\n        console.error('can not fetch employees list');\n        return throwError('Unable to fetch employees list : ', error);\n      })\n    )\n   }\n\n\n\n   createEmployee(employee : Employee) : Observable<Employee>{\n    return this.httpClient.post<Employee>(this.baseUrl+'/save/employee', employee).pipe(\n      catchError(error => {\n        console.log('failed to create an new employee', error);\n        return throwError('unable to create employee', error)\n      })\n    );\n   }\n\n   updateEmployee(id : number, employee : Employee ): Observable<Employee>{\n    return this.httpClient.put<Employee>(this.baseUrl+`/update/employee/${id}`, employee);\n   }\n\n   getEmployeeById(id : number):Observable<Employee>{\n    return this.httpClient.get<Employee>(this.baseUrl+`/get/employee/${id}`);\n   }\n\n   deleteEmployeeById(id :number) : Observable<void>{\n    \n   }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}