{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class EmployeeService {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.baseUrl = 'http://localhost:9999/api';\n  }\n  redirectTo(uri) {\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigate([uri]);\n    });\n    location.reload();\n  }\n  getEmployeesList() {\n    return this.httpClient.get(this.baseUrl + \"/employees\").pipe(catchError(error => {\n      console.error('can not fetch employees list');\n      return throwError('Unable to fetch employees list : ', error);\n    }));\n  }\n  createEmployee(employee) {\n    return this.httpClient.post(this.baseUrl + '/save/employee', employee).pipe(catchError(error => {\n      console.log('failed to create an new employee', error);\n      return throwError('unable to create employee', error);\n    }));\n  }\n  updateEmployee(id, employee) {\n    return this.httpClient.put(this.baseUrl + '/update/employee/${id}', employee).pipe(catchError(error => {\n      console.log('failed to update existing employee', error);\n      return throwError('unable to update employee', error);\n    }));\n  }\n  getEmployeeById(id) {\n    return this.httpClient.get(`${this.baseUrl}/get/employee/${id}`, {\n      observe: 'response'\n    }).pipe(catchError(error => {\n      if (error.status === 302) {\n        // Handle redirection\n        const redirectUrl = error.headers.get('Location');\n        if (redirectUrl) {\n          console.log('Redirected to:', redirectUrl);\n          // Optionally, you can navigate to the new URL or make another request\n          // Example: this.router.navigate([redirectUrl]);\n          // Or make another request: return this.getEmployeeByIdFromRedirect(redirectUrl);\n        } else {\n          console.error('Redirection URL not found in headers');\n        }\n      }\n      // Propagate the error further\n      return throwError(error);\n    }), map(response => response.body) // Extract the body of the response\n    );\n  }\n\n  deleteEmployeeById(id) {\n    return this.httpClient.delete(this.baseUrl + '/delete/employee/${id}').pipe(catchError(error => {\n      console.log('failed to delete an existing employee', error);\n      return throwError('unable to delete employee', error);\n    }));\n  }\n  static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAQzD,OAAM,MAAOC,eAAe;EAI1BC,YAAoBC,UAAsB,EAAUC,MAAa;IAA7C,eAAU,GAAVD,UAAU;IAAsB,WAAM,GAANC,MAAM;IAFlD,YAAO,GAAG,2BAA2B;EAI7C;EAGAC,UAAU,CAACC,GAAW;IACpB,IAAI,CAACF,MAAM,CAACG,aAAa,CAAC,GAAG,EAAE;MAAEC,kBAAkB,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CAAC,MAAK;MACrE,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,CAACJ,GAAG,CAAC,CAAC;IAAA,CAAC,CAAC;IAC7BK,QAAQ,CAACC,MAAM,EAAE;EACrB;EAEAC,gBAAgB;IACd,OAAO,IAAI,CAACV,UAAU,CAACW,GAAG,CAAa,IAAI,CAACC,OAAO,GAAG,YAAY,CAAC,CAACC,IAAI,CACtEjB,UAAU,CAACkB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAC;MAC7C,OAAOjB,UAAU,CAAC,mCAAmC,EAAEiB,KAAK,CAAC;IAC/D,CAAC,CAAC,CACH;EACH;EAIAE,cAAc,CAACC,QAAkB;IAC/B,OAAO,IAAI,CAACjB,UAAU,CAACkB,IAAI,CAAW,IAAI,CAACN,OAAO,GAAG,gBAAgB,EAAEK,QAAQ,CAAC,CAACJ,IAAI,CACnFjB,UAAU,CAACkB,KAAK,IAAG;MACjBC,OAAO,CAACI,GAAG,CAAC,kCAAkC,EAAEL,KAAK,CAAC;MACtD,OAAOjB,UAAU,CAAC,2BAA2B,EAAEiB,KAAK,CAAC;IACvD,CAAC,CAAC,CACH;EACH;EAEAM,cAAc,CAACC,EAAU,EAAEJ,QAAkB;IAC3C,OAAO,IAAI,CAACjB,UAAU,CAACsB,GAAG,CAAW,IAAI,CAACV,OAAO,GAAG,wBAAwB,EAAEK,QAAQ,CAAC,CAACJ,IAAI,CAC1FjB,UAAU,CAACkB,KAAK,IAAG;MACjBC,OAAO,CAACI,GAAG,CAAC,oCAAoC,EAAEL,KAAK,CAAC;MACxD,OAAOjB,UAAU,CAAC,2BAA2B,EAAEiB,KAAK,CAAC;IACvD,CAAC,CAAC,CACH;EACH;EAEAS,eAAe,CAACF,EAAU;IACxB,OAAO,IAAI,CAACrB,UAAU,CAACW,GAAG,CAAW,GAAG,IAAI,CAACC,OAAO,iBAAiBS,EAAE,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC,CAChGX,IAAI,CACHjB,UAAU,CAAEkB,KAAK,IAAI;MACnB,IAAIA,KAAK,CAACW,MAAM,KAAK,GAAG,EAAE;QACxB;QACA,MAAMC,WAAW,GAAGZ,KAAK,CAACa,OAAO,CAAChB,GAAG,CAAC,UAAU,CAAC;QACjD,IAAIe,WAAW,EAAE;UACfX,OAAO,CAACI,GAAG,CAAC,gBAAgB,EAAEO,WAAW,CAAC;UAC1C;UACA;UACA;SACD,MAAM;UACLX,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAC;;;MAGzD;MACA,OAAOjB,UAAU,CAACiB,KAAK,CAAC;IAC1B,CAAC,CAAC,EACFc,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC;IAAA,CAChC;EACL;;EAEAC,kBAAkB,CAACV,EAAU;IAC3B,OAAO,IAAI,CAACrB,UAAU,CAACgC,MAAM,CAAO,IAAI,CAACpB,OAAO,GAAG,wBAAwB,CAAC,CAACC,IAAI,CAC/EjB,UAAU,CAACkB,KAAK,IAAG;MACjBC,OAAO,CAACI,GAAG,CAAC,uCAAuC,EAAEL,KAAK,CAAC;MAC3D,OAAOjB,UAAU,CAAC,2BAA2B,EAAEiB,KAAK,CAAC;IACvD,CAAC,CAAC,CACH;EACH;EAAC;qBA1EUhB,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAmC,SAAfnC,eAAe;IAAAoC,YAFd;EAAM","names":["catchError","throwError","EmployeeService","constructor","httpClient","router","redirectTo","uri","navigateByUrl","skipLocationChange","then","navigate","location","reload","getEmployeesList","get","baseUrl","pipe","error","console","createEmployee","employee","post","log","updateEmployee","id","put","getEmployeeById","observe","status","redirectUrl","headers","map","response","body","deleteEmployeeById","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Personal Projects\\self_learning\\springboot-practice-application\\spring-security-telugu\\src\\main\\webapp\\app\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Employee } from '../interfaces/employee';\nimport { HttpClient } from '@angular/common/http'\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  private baseUrl = 'http://localhost:9999/api';\n\n  constructor(private httpClient: HttpClient, private router:Router) {\n\n  }\n\n\n  redirectTo(uri: string) {\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\n      this.router.navigate([uri])});\n      location.reload();\n  }\n\n  getEmployeesList(): Observable<Employee[]> {\n    return this.httpClient.get<Employee[]>(this.baseUrl + \"/employees\").pipe(\n      catchError(error => {\n        console.error('can not fetch employees list');\n        return throwError('Unable to fetch employees list : ', error);\n      })\n    )\n  }\n\n\n\n  createEmployee(employee: Employee): Observable<Employee> {\n    return this.httpClient.post<Employee>(this.baseUrl + '/save/employee', employee).pipe(\n      catchError(error => {\n        console.log('failed to create an new employee', error);\n        return throwError('unable to create employee', error)\n      })\n    );\n  }\n\n  updateEmployee(id: number, employee: Employee): Observable<Employee> {\n    return this.httpClient.put<Employee>(this.baseUrl + '/update/employee/${id}', employee).pipe(\n      catchError(error => {\n        console.log('failed to update existing employee', error);\n        return throwError('unable to update employee', error)\n      })\n    );\n  }\n\n  getEmployeeById(id: number): Observable<Employee> {\n    return this.httpClient.get<Employee>(`${this.baseUrl}/get/employee/${id}`, { observe: 'response' })\n      .pipe(\n        catchError((error) => {\n          if (error.status === 302) {\n            // Handle redirection\n            const redirectUrl = error.headers.get('Location');\n            if (redirectUrl) {\n              console.log('Redirected to:', redirectUrl);\n              // Optionally, you can navigate to the new URL or make another request\n              // Example: this.router.navigate([redirectUrl]);\n              // Or make another request: return this.getEmployeeByIdFromRedirect(redirectUrl);\n            } else {\n              console.error('Redirection URL not found in headers');\n            }\n          }\n          // Propagate the error further\n          return throwError(error);\n        }),\n        map(response => response.body) // Extract the body of the response\n      );\n  }\n  \n  deleteEmployeeById(id: number): Observable<void> {\n    return this.httpClient.delete<void>(this.baseUrl + '/delete/employee/${id}').pipe(\n      catchError(error => {\n        console.log('failed to delete an existing employee', error);\n        return throwError('unable to delete employee', error)\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}