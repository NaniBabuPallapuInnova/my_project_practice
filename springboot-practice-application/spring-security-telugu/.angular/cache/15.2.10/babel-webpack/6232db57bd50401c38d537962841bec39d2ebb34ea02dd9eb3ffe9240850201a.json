{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class EmployeeService {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.baseUrl = 'http://localhost:9999/api';\n  }\n  redirectTo(uri) {\n    this.router.navigateByUrl('/', {\n      skipLocationChange: true\n    }).then(() => {\n      this.router.navigate([uri]);\n    });\n    location.reload();\n  }\n  getEmployeesList() {\n    return this.httpClient.get(this.baseUrl + \"/employees\").pipe(catchError(error => {\n      console.error('can not fetch employees list');\n      return throwError('Unable to fetch employees list : ', error);\n    }));\n  }\n  createEmployee(employee) {\n    return this.httpClient.post(this.baseUrl + '/save/employee', employee).pipe(catchError(error => {\n      console.log('failed to create an new employee', error);\n      return throwError('unable to create employee', error);\n    }));\n  }\n  updateEmployee(id, employee) {\n    return this.httpClient.put(this.baseUrl + '/update/employee/${id}', employee).pipe(catchError(error => {\n      console.log('failed to update existing employee', error);\n      return throwError('unable to update employee', error);\n    }));\n  }\n  getEmployeeById(id) {\n    return this.httpClient.get(`${this.baseUrl}/get/employee/${id}`).pipe(catchError(error => {\n      console.log('failed to fetch an existing employee', id);\n      return throwError('unable to fetch employee' + error);\n    }));\n  }\n  deleteEmployeeById(id) {\n    return this.httpClient.delete(`${this.baseUrl}/delete/employee/${id}`).pipe(catchError(error => {\n      console.log('failed to delete an existing employee', error);\n      return throwError('unable to delete employee', error);\n    }));\n  }\n  searchEmployeesBasedOnNameOrEmpId(keyword) {\n    const params = new HttpParams().set('keyword', keyword);\n    console.log('printing params value' + params);\n    return this.httpClient.get(`${this.baseUrl}/search/employees`, {\n      params\n    }).pipe(catchError(error => {\n      return throwError();\n    }));\n  }\n  static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["catchError","throwError","HttpParams","EmployeeService","constructor","httpClient","router","redirectTo","uri","navigateByUrl","skipLocationChange","then","navigate","location","reload","getEmployeesList","get","baseUrl","pipe","error","console","createEmployee","employee","post","log","updateEmployee","id","put","getEmployeeById","deleteEmployeeById","delete","searchEmployeesBasedOnNameOrEmpId","keyword","params","set","factory","providedIn"],"sourceRoot":"","sources":["C:\\Personal Projects\\self_learning\\springboot-practice-application\\spring-security-telugu\\src\\main\\webapp\\app\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, catchError, map, throwError } from 'rxjs';\r\nimport { Employee } from '../interfaces/employee';\r\nimport { HttpClient, HttpParams } from '@angular/common/http'\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n\r\n  private baseUrl = 'http://localhost:9999/api';\r\n\r\n  constructor(private httpClient: HttpClient, private router:Router) {\r\n\r\n  }\r\n\r\n\r\n  redirectTo(uri: string) {\r\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\r\n      this.router.navigate([uri])});\r\n      location.reload();\r\n  }\r\n\r\n  getEmployeesList(): Observable<Employee[]> {\r\n    return this.httpClient.get<Employee[]>(this.baseUrl + \"/employees\").pipe(\r\n      catchError(error => {\r\n        console.error('can not fetch employees list');\r\n        return throwError('Unable to fetch employees list : ', error);\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n\r\n  createEmployee(employee: Employee): Observable<Employee> {\r\n    return this.httpClient.post<Employee>(this.baseUrl + '/save/employee', employee).pipe(\r\n      catchError(error => {\r\n        console.log('failed to create an new employee', error);\r\n        return throwError('unable to create employee', error)\r\n      })\r\n    );\r\n  }\r\n\r\n  updateEmployee(id: number, employee: Employee): Observable<Employee> {\r\n    return this.httpClient.put<Employee>(this.baseUrl + '/update/employee/${id}', employee).pipe(\r\n      catchError(error => {\r\n        console.log('failed to update existing employee', error);\r\n        return throwError('unable to update employee', error)\r\n      })\r\n    );\r\n  }\r\n\r\n  getEmployeeById(id: number): Observable<Employee> {\r\n    return this.httpClient.get<Employee>(`${this.baseUrl}/get/employee/${id}`).pipe(\r\n      catchError( error => {\r\n        console.log('failed to fetch an existing employee', id);\r\n        return throwError('unable to fetch employee'+error);\r\n      })\r\n    )\r\n  }\r\n  \r\n  deleteEmployeeById(id: number): Observable<void> {\r\n    return this.httpClient.delete<void>(`${this.baseUrl}/delete/employee/${id}`).pipe(\r\n      catchError(error => {\r\n        console.log('failed to delete an existing employee', error);\r\n        return throwError('unable to delete employee', error)\r\n      })\r\n    );\r\n  }\r\n\r\n  searchEmployeesBasedOnNameOrEmpId(keyword : string):Observable<Employee[]>{\r\n    const params = new HttpParams().set('keyword', keyword);\r\n    console.log('printing params value'+params)\r\n    return this.httpClient.get<Employee[]>(`${this.baseUrl}/search/employees`, {params}).pipe(\r\n      catchError(error => {\r\n        return throwError()\r\n      })\r\n    )\r\n  }\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}