{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { catchError, throwError } from 'rxjs';\n'@Angular/common/http';\nlet EmployeeService = class EmployeeService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = 'http://localhost:9999/api';\n  }\n  getEmployeesList() {\n    return this.httpClient.get(this.baseUrl + \"/\" + 'employees').pipe(catchError(error => {\n      console.error('can not fetch employees list');\n      return throwError('Unable to fetch employees list : ', error);\n    }));\n  }\n};\nEmployeeService = __decorate([Injectable({\n  providedIn: 'root'\n})], EmployeeService);\nexport { EmployeeService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;AAE1B,sBAAsB;AAK9C,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,UAAuB;IAAvB,eAAU,GAAVA,UAAU;IAFtB,YAAO,GAAG,2BAA2B;EAI5C;EAEAC,gBAAgB;IACf,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAa,IAAI,CAACC,OAAO,GAAC,GAAG,GAAC,WAAW,CAAC,CAACC,IAAI,CACvER,UAAU,CAACS,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAC;MAC7C,OAAOR,UAAU,CAAC,mCAAmC,EAAEQ,KAAK,CAAC;IAC/D,CAAC,CAAC,CACH;EACF;CACF;AAhBYP,eAAe,eAH3BH,UAAU,CAAC;EACVY,UAAU,EAAE;CACb,CAAC,GACWT,eAAe,CAgB3B;SAhBYA,eAAe","names":["Injectable","catchError","throwError","EmployeeService","constructor","httpClient","getEmployeesList","get","baseUrl","pipe","error","console","providedIn"],"sourceRoot":"","sources":["C:\\Personal Projects\\self_learning\\springboot-practice-application\\spring-security-telugu\\src\\main\\webapp\\app\\services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { Employee } from '../interfaces/employee';\nimport { HttpClient} from from '@Angular/common/http'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  private baseUrl = 'http://localhost:9999/api';\n\n  constructor(private httpClient : HttpClient) {\n\n   }\n\n   getEmployeesList() : Observable<Employee[]>{\n    return this.httpClient.get<Employee[]>(this.baseUrl+\"/\"+'employees').pipe(\n      catchError(error => {\n        console.error('can not fetch employees list');\n        return throwError('Unable to fetch employees list : ', error);\n      })\n    )\n   }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}